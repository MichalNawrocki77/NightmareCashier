//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
<<<<<<< HEAD
            ""name"": ""PlayerActionMap"",
=======
            ""name"": ""PlayerInGameWorld"",
>>>>>>> Luter
            ""id"": ""2c1fddc6-7ba4-4754-aaa4-9f8cb73b14a7"",
            ""actions"": [
                {
                    ""name"": ""MovementAction"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f4e839d4-068a-4d2e-a884-165e3303a283"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
<<<<<<< HEAD
                },
                {
                    ""name"": ""InteractionAction"",
                    ""type"": ""Button"",
                    ""id"": ""88df4118-e177-4351-9c91-4dc18dca765f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
=======
>>>>>>> Luter
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""44f3e0fe-a838-41b4-8d30-7dd842a1e27e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5854d9a3-5075-4cb6-9dc5-e01877fad17b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""57810fc5-6cfd-4d38-aed3-4dca35f1cd71"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c81e602d-905d-483b-b191-f416d24dc83b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b34f6943-ff2d-4ca0-a591-fa46fda5b9ac"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
<<<<<<< HEAD
                },
                {
                    ""name"": """",
                    ""id"": ""8cadc0a1-9281-4774-acd1-9421dab01486"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractionAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
=======
>>>>>>> Luter
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
<<<<<<< HEAD
        // PlayerActionMap
        m_PlayerActionMap = asset.FindActionMap("PlayerActionMap", throwIfNotFound: true);
        m_PlayerActionMap_MovementAction = m_PlayerActionMap.FindAction("MovementAction", throwIfNotFound: true);
        m_PlayerActionMap_InteractionAction = m_PlayerActionMap.FindAction("InteractionAction", throwIfNotFound: true);
=======
        // PlayerInGameWorld
        m_PlayerInGameWorld = asset.FindActionMap("PlayerInGameWorld", throwIfNotFound: true);
        m_PlayerInGameWorld_MovementAction = m_PlayerInGameWorld.FindAction("MovementAction", throwIfNotFound: true);
>>>>>>> Luter
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

<<<<<<< HEAD
    // PlayerActionMap
    private readonly InputActionMap m_PlayerActionMap;
    private List<IPlayerActionMapActions> m_PlayerActionMapActionsCallbackInterfaces = new List<IPlayerActionMapActions>();
    private readonly InputAction m_PlayerActionMap_MovementAction;
    private readonly InputAction m_PlayerActionMap_InteractionAction;
    public struct PlayerActionMapActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActionMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementAction => m_Wrapper.m_PlayerActionMap_MovementAction;
        public InputAction @InteractionAction => m_Wrapper.m_PlayerActionMap_InteractionAction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces.Add(instance);
            @MovementAction.started += instance.OnMovementAction;
            @MovementAction.performed += instance.OnMovementAction;
            @MovementAction.canceled += instance.OnMovementAction;
            @InteractionAction.started += instance.OnInteractionAction;
            @InteractionAction.performed += instance.OnInteractionAction;
            @InteractionAction.canceled += instance.OnInteractionAction;
        }

        private void UnregisterCallbacks(IPlayerActionMapActions instance)
=======
    // PlayerInGameWorld
    private readonly InputActionMap m_PlayerInGameWorld;
    private List<IPlayerInGameWorldActions> m_PlayerInGameWorldActionsCallbackInterfaces = new List<IPlayerInGameWorldActions>();
    private readonly InputAction m_PlayerInGameWorld_MovementAction;
    public struct PlayerInGameWorldActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerInGameWorldActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementAction => m_Wrapper.m_PlayerInGameWorld_MovementAction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInGameWorld; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInGameWorldActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInGameWorldActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInGameWorldActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInGameWorldActionsCallbackInterfaces.Add(instance);
            @MovementAction.started += instance.OnMovementAction;
            @MovementAction.performed += instance.OnMovementAction;
            @MovementAction.canceled += instance.OnMovementAction;
        }

        private void UnregisterCallbacks(IPlayerInGameWorldActions instance)
>>>>>>> Luter
        {
            @MovementAction.started -= instance.OnMovementAction;
            @MovementAction.performed -= instance.OnMovementAction;
            @MovementAction.canceled -= instance.OnMovementAction;
<<<<<<< HEAD
            @InteractionAction.started -= instance.OnInteractionAction;
            @InteractionAction.performed -= instance.OnInteractionAction;
            @InteractionAction.canceled -= instance.OnInteractionAction;
        }

        public void RemoveCallbacks(IPlayerActionMapActions instance)
        {
            if (m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionMapActions @PlayerActionMap => new PlayerActionMapActions(this);
    public interface IPlayerActionMapActions
    {
        void OnMovementAction(InputAction.CallbackContext context);
        void OnInteractionAction(InputAction.CallbackContext context);
=======
        }

        public void RemoveCallbacks(IPlayerInGameWorldActions instance)
        {
            if (m_Wrapper.m_PlayerInGameWorldActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInGameWorldActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInGameWorldActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInGameWorldActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInGameWorldActions @PlayerInGameWorld => new PlayerInGameWorldActions(this);
    public interface IPlayerInGameWorldActions
    {
        void OnMovementAction(InputAction.CallbackContext context);
>>>>>>> Luter
    }
}
